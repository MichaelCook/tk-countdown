#!/bin/sh
# -*- tcl -*-

#
# Display a continually-updating countdown to a specified time.
#

# These lines end in a backslash so that wish ignores them (thinking they
# are part of this comment).  But /bin/sh executes them. \
opts=$(getopt --name "${0##*/}" --shell sh \
 -o a:h \
 -l action:,help \
 -- "$@") || { echo >&2 "Try '${0##*/} --help' for more information."; \
 exit 1; }; eval set -- "$opts"; exec wish "$0" -- "$@"

set this [file tail $argv0]	; # This script's name for error messages

set num_beeps 0
proc beep {} {
    global num_beeps
    incr num_beeps
    if {$num_beeps <= 10 || $num_beeps % 30 == 0} {
        bell
    }
}

set action beep

while {[llength $argv] > 0} {
    set arg [lindex $argv 0]
    set argv [lrange $argv 1 end]
    switch -- $arg {
	--action - -a {
	    set action [lindex $argv 0]
	    set argv [lrange $argv 1 end]
	}
	--help - -h {
	    puts "Usage: $this \[options] WHEN...

WHEN can be specified multiple times in any form accepted by date(1)

Examples: '5am tomorrow'
          '5 hours' (i.e., from now)

Options:
--action (-a) command   What to do when the time expires.
                        The command is eval'ed as a Tcl expression.
                        Examples:
                            --action 'exit 1'
                        Default: --action bell
"
            exit 0
	}
	-- {
	    break
	}
	default {
	    puts stderr "$this: internal error at '$arg'"
	    exit 1
	}
    }
}

if {[llength $argv] == 0} {
    puts stderr "$this: Wrong number of arguments."
    puts stderr "Try '$this --help' for more information."
    exit 1
}

set fmt "%Y-%m-%d %a %I:%M:%S%p"

proc click {i} {
    global rem end

    incr rem -1
    if {$rem == 0} {
	exit
    }
    pack forget .remaining$i
    set end($i) 0
}

set i 0
set now [clock seconds]
foreach arg $argv {
    set end($i) [exec date "--date=$arg" +%s]
    if {$end($i) < $now} {
	# Assume it was intended for tomorrow.
	# e.g., "5am" == "5am tomorrow".
	incr end($i) [expr 24 * 60 * 60]
    }
    set endhms($i) [clock format $end($i) -format $fmt]
    set remaining($i) ...
    button .remaining$i -textvariable remaining($i) \
	-relief raised -command "click $i"
    pack .remaining$i
    incr i 1
}
set num $i
set rem $i

proc tick {} {
    global num end endhms remaining action

    set now [clock seconds]

    set first 1
    for {set i 0} {$i < $num} {incr i} {
	if {$end($i) == 0} {
	    continue
	}

	set t [expr $end($i) - $now]
	if {$t <= 0} {
	    eval $action
	}

	if {$t < 0} {
	    set s "-"
	    set t [expr - $t]
	} else {
	    set s ""
	}
	set secs [expr $t % 60]
	set t [expr ($t - $secs) / 60]

	set mins [expr $t % 60]
	set t [expr ($t - $mins) / 60]

	set rem [format "%s%d:%02d:%02d%s" $s $t $mins $secs $s]
	set remaining($i) "$endhms($i) <> $rem"
	if {$first} {
	    wm title . $rem
	}
	set first 0
    }
    after 1000 tick
}

tick
